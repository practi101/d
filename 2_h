import heapq

class node():
    def __init__(self,freq,symbol,left=None,right=None):
        self.freq=freq
        self.symbol=symbol
        self.left=left
        self.right=right
        self.huff=''

    def __lt__(self, nxt):
        return self.freq < nxt.freq

a=['a','b','c','d','e','f']
b=[5,9,12,13,16,45]

lis=[]
for i in range(len(a)):
    heapq.heappush(lis,node(b[i],a[i]))

while(len(lis)>1):
    x = heapq.heappop(lis)
    y = heapq.heappop(lis)
    x.huff=0
    y.huff=1
    newnode =node(x.freq+y.freq,x.symbol+y.symbol,x,y)
    heapq.heappush(lis,newnode)

def printnode(root,val=''):
    if(root.left):
        printnode(root.left,val+'0')
    if(root.right):
        printnode(root.right,val+'1')
    if (not root.left and not root.right ):
        print(f"{root.symbol}--> {val}  ")

printnode(lis[0])
